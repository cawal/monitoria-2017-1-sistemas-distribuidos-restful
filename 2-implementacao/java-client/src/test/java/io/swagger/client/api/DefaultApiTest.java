/*
 * MyClinic API
 * My nice API to give to other developers
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Appointment;
import io.swagger.client.model.Error;
import org.joda.time.LocalDate;
import io.swagger.client.model.Patient;
import io.swagger.client.model.Physician;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Appointment list
     *
     * Allows to return appointment list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentsGetTest() throws ApiException {
        LocalDate fromDate = null;
        LocalDate toDate = null;
        List<Appointment> response = api.appointmentsGet(fromDate, toDate);

        // TODO: test validations
    }
    
    /**
     * Add appointments to list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appointmentsPostTest() throws ApiException {
        Appointment appointments = null;
        api.appointmentsPost(appointments);

        // TODO: test validations
    }
    
    /**
     * Remove appointments from list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appoitmentsIdDeleteTest() throws ApiException {
        String id = null;
        api.appoitmentsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve individual physician from list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appoitmentsIdGetTest() throws ApiException {
        String id = null;
        Physician response = api.appoitmentsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update appointment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appoitmentsIdPutTest() throws ApiException {
        String id = null;
        Appointment appointment = null;
        api.appoitmentsIdPut(id, appointment);

        // TODO: test validations
    }
    
    /**
     * Patient list
     *
     * Allows to return patient list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patientsGetTest() throws ApiException {
        String name = null;
        List<Patient> response = api.patientsGet(name);

        // TODO: test validations
    }
    
    /**
     * Retrieve the list of appointments of patient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patientsIdAppointmentsGetTest() throws ApiException {
        String id = null;
        List<Appointment> response = api.patientsIdAppointmentsGet(id);

        // TODO: test validations
    }
    
    /**
     * Remove individual patients from list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patientsIdDeleteTest() throws ApiException {
        String id = null;
        api.patientsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Return individual patients
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patientsIdGetTest() throws ApiException {
        String id = null;
        Patient response = api.patientsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update individual patients
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patientsIdPutTest() throws ApiException {
        String id = null;
        Patient patient = null;
        api.patientsIdPut(id, patient);

        // TODO: test validations
    }
    
    /**
     * Add individual patients to list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patientsPostTest() throws ApiException {
        Patient patient = null;
        api.patientsPost(patient);

        // TODO: test validations
    }
    
    /**
     * Physician list
     *
     * Allows to return patient list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void physiciansGetTest() throws ApiException {
        String name = null;
        List<Physician> response = api.physiciansGet(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void physiciansIdAppointmentsGetTest() throws ApiException {
        String id = null;
        List<Appointment> response = api.physiciansIdAppointmentsGet(id);

        // TODO: test validations
    }
    
    /**
     * Remove individual physicians from list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void physiciansIdDeleteTest() throws ApiException {
        String id = null;
        api.physiciansIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve individual physician from list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void physiciansIdGetTest() throws ApiException {
        String id = null;
        Physician response = api.physiciansIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update individual physicians
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void physiciansIdPutTest() throws ApiException {
        String id = null;
        Physician patient = null;
        api.physiciansIdPut(id, patient);

        // TODO: test validations
    }
    
    /**
     * Add individual physicians to list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void physiciansPostTest() throws ApiException {
        Patient patient = null;
        api.physiciansPost(patient);

        // TODO: test validations
    }
    
}
